{"ast":null,"code":"var _jsxFileName = \"E:\\\\freelance\\\\react learnings\\\\my-app\\\\Frontend\\\\src\\\\pages\\\\ReviewPage.js\",\n  _s = $RefreshSig$();\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reviewPage = async () => {\n  _s();\n  var _order$items;\n  const state = useLocation();\n  const navigate = useNavigate();\n  const order = state === null || state === void 0 ? void 0 : state.order;\n  const [Review, setReviews] = useState((order === null || order === void 0 ? void 0 : (_order$items = order.items) === null || _order$items === void 0 ? void 0 : _order$items.map(item => ({\n    productId: item.id,\n    rating: 0,\n    comment: \"\"\n  }))) || []);\n  if (!order) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-red-500\",\n      children: \"No order found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 24\n    }, this);\n  }\n  const handleReviewChange = (index, field, value) => {\n    const newReviews = [...reviews];\n    newReviews[index][field] = value;\n    setReviews(newReviews);\n  };\n  const token = localStorage.getItem(\"userToken\");\n  console.log(\"received Token: \", token);\n  const submitReview = async () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      alert(\"Authentication required. Please log in.\");\n      return;\n    }\n\n    // ✅ Ensure the correct field name (`product` instead of `productId`)\n    const formattedReviews = reviews.map(review => ({\n      product: review.productId,\n      // Fix the key name\n      rating: review.rating,\n      comment: review.comment\n    }));\n    try {\n      const response = await fetch(\"http://localhost:5000/api/reviews\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(formattedReviews)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Reviews submitted successfully!\");\n        navigate(-1);\n      } else {\n        alert(data.message || \"Failed to submit reviews.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting reviews:\", error);\n      alert(\"An error occurred while submitting reviews.\");\n    }\n  };\n};\n_s(reviewPage, \"Apen1UWg2RbxN4wdJ/sjCpOhq7M=\", false, function () {\n  return [useLocation, useNavigate];\n});","map":{"version":3,"names":["useLocation","useNavigate","useState","axios","jsxDEV","_jsxDEV","reviewPage","_s","_order$items","state","navigate","order","Review","setReviews","items","map","item","productId","id","rating","comment","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleReviewChange","index","field","value","newReviews","reviews","token","localStorage","getItem","console","log","submitReview","alert","formattedReviews","review","product","response","fetch","method","headers","Authorization","body","JSON","stringify","data","json","ok","message","error"],"sources":["E:/freelance/react learnings/my-app/Frontend/src/pages/ReviewPage.js"],"sourcesContent":["import { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst reviewPage = async () => {\r\n        const state = useLocation();\r\n        const navigate = useNavigate();\r\n        const order = state?.order;\r\n\r\n        const [Review, setReviews] = useState(\r\n                order?.items?.map((item) => ({ productId: item.id, rating: 0, comment: \"\" })) || []\r\n        );\r\n\r\n        if (!order) {\r\n                return <p className=\"text-center text-red-500\">No order found.</p>;\r\n        }\r\n\r\n        const handleReviewChange = (index, field, value) => {\r\n                const newReviews = [...reviews];\r\n                newReviews[index][field] = value;\r\n                setReviews(newReviews);\r\n\r\n        };\r\n\r\n        const token = localStorage.getItem(\"userToken\");\r\n        console.log(\"received Token: \", token);\r\n\r\n        const submitReview = async () => {\r\n                const token = localStorage.getItem(\"token\");\r\n\r\n                if (!token) {\r\n                        alert(\"Authentication required. Please log in.\");\r\n                        return;\r\n                }\r\n\r\n                // ✅ Ensure the correct field name (`product` instead of `productId`)\r\n                const formattedReviews = reviews.map((review) => ({\r\n                        product: review.productId, // Fix the key name\r\n                        rating: review.rating,\r\n                        comment: review.comment,\r\n                }));\r\n\r\n                try {\r\n                        const response = await fetch(\"http://localhost:5000/api/reviews\", {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                        \"Content-Type\": \"application/json\",\r\n                                        Authorization: `Bearer ${token}`,\r\n                                },\r\n                                body: JSON.stringify(formattedReviews),\r\n                        });\r\n\r\n                        const data = await response.json();\r\n\r\n                        if (response.ok) {\r\n                                alert(\"Reviews submitted successfully!\");\r\n                                navigate(-1);\r\n                        } else {\r\n                                alert(data.message || \"Failed to submit reviews.\");\r\n                        }\r\n                } catch (error) {\r\n                        console.error(\"Error submitting reviews:\", error);\r\n                        alert(\"An error occurred while submitting reviews.\");\r\n                }\r\n        };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}